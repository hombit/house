#!/usr/bin/env python3


import json, os, sys
from bottle import Bottle, abort, static_file, run
from house import weather, rasp
from time import localtime
from typing import Tuple


SPACE = '<span style="padding-left:1em;"></span>'
AUTO_REFRESH_RATE = 15
RUNTIME_TO_STATION = 900 - AUTO_REFRESH_RATE
# STATIC_PATH  = os.path.join(sys.prefix, 'static')


app = Bottle()


# @app.get('/static/<filepath:path>')
# def static_files(filepath):
#     return static_file(filepath, root=STATIC_PATH)


@app.get('/json/<page>')
def json_(page) -> str:
    try:
        this_module = sys.modules[__name__]
        page_strings = getattr(this_module, f'{page}_strings')()
        return json.dumps(page_strings, ensure_ascii=False)
    except AttributeError:
        abort(404, 'No such page')


def weather_strings() -> Tuple[str, ...]:
    try:
        jw = weather.get_weather()
        w_now = jw['current_observation']

        temp_now = weather.temperature(w_now['temp_c'])
        wind_now = weather.wind(w_now['wind_kph'])
        rel_hum_now = w_now['relative_humidity']
        pres_now = weather.pressure(w_now['pressure_mb'])
        cond_now = w_now['weather']
        str_now = f'{cond_now}{SPACE} {temp_now}&nbsp;&deg;C{SPACE} {rel_hum_now}{SPACE} {wind_now}&nbsp;м/с{SPACE} {pres_now}&nbsp;бар'

        w_astro = jw['moon_phase']
        moon_phase = w_astro['phaseofMoon']
        sunrise = weather.hour_minute(w_astro['sunrise'])
        sunset = weather.hour_minute(w_astro['sunset'])
        str_astro = f'{moon_phase}, Солнце на небе c {sunrise} до {sunset}'

        if localtime().tm_hour < 19:
            w_day = jw['forecast']['simpleforecast']['forecastday'][0]
            day = 'Сегодня'
        else:
            w_day = jw['forecast']['simpleforecast']['forecastday'][1]
            day = 'Завтра'
        low_day = weather.temperature(w_day['low']['celsius'])
        high_day = weather.temperature(w_day['high']['celsius'])
        max_wind_day = weather.wind(w_day['maxwind']['kph'])
        cond_day = w_day['conditions'].lower()
        str_day = f'{day} {cond_day}, от {low_day}&nbsp;&deg;C до {high_day}&nbsp;&deg;C и ветер до {max_wind_day}&nbsp;м/с'
    except KeyError:
        return 'Информация о погоде недоступна',
    except Exception as e:
        return f'Exception of type {type(e)}: {e}',
    return str_now, str_astro, str_day


def rasp_strings() -> Tuple[str, ...]:
    try:
        jr = rasp.get_rasp()
    except KeyError:
        return 'Информация о расписании недоступна',
    except Exception as e:
        return f'Exception of type {type(e)}: {e}',
    return jr['threads'][0]['arrival'],


@app.get('/pda')
def pda() -> str:
    ws = weather_strings()
    weather_html = '<h3>' + '</h3>\n<h3>'.join(ws) + '</h3>'
    return f'''
        <meta http-equiv="refresh" content="{AUTO_REFRESH_RATE}">
        {weather_html}
        <h3>
            Данные о погоде предоставлены
            <a href="https://wunderground.com">Weather Underground</a>
            <a href="https://wunderground.com">
                <img src="///icons.wxug.com/graphics/wu2/logo_130x80.png" style="height:0.8em; width:auto"/>
            </a>
        </h3>
    '''

run(app, server='gunicorn', host='0.0.0.0', port=15134)

